{"version":3,"sources":["components/SearchBar/SearchBar.js","components/EmployeeTable/EmployeeTable.js","components/Header/Header.js","utils/API.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","onChange","handleInputChange","value","search","name","type","placeholder","id","EmployeeTable","results","map","emp","src","picture","medium","alt","last","first","phone","cell","email","format","dob","date","registered","Header","axios","get","Container","state","alphabetical","alphResults","sortedIcon","componentDidMount","getEmployees","API","then","res","setState","data","console","log","catch","err","event","target","handleFormSubmit","preventDefault","searchEmployees","sortByName","sorted","sort","a","b","nameA","toLowerCase","nameB","this","scope","onClick","filter","includes","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4YAqBeA,MAlBf,SAAmBC,GACjB,OACE,8BACE,yBAAKC,UAAU,cACb,2BACEC,SAAUF,EAAMG,kBAChBC,MAAOJ,EAAMK,OACbC,KAAK,SACLC,KAAK,OACLN,UAAU,eACVO,YAAY,qBACZC,GAAG,c,sBCmBEC,MA7Bf,SAAuBV,GAErB,OACE,+BACGA,EAAMW,QAAQC,KAAI,SAACC,GAAD,OACjB,4BACE,4BACE,yBAAKC,IAAKD,EAAIE,QAAQC,OAAQP,GAAG,SAASQ,IAAI,YAEhD,4BACCJ,EAAIP,KAAKY,KADV,KACkBL,EAAIP,KAAKa,OAE3B,4BACE,oCADF,IACgBN,EAAIO,MADpB,IAC2B,6BACzB,oCAFF,IAEgBP,EAAIQ,KAFpB,IAE0B,6BACxB,qCAHF,IAGiBR,EAAIS,MAHrB,IAG4B,8BAE5B,4BACE,kBAAC,IAAD,CAAQC,OAAO,iBAAiBV,EAAIW,IAAIC,OAE1C,4BACE,kBAAC,IAAD,CAAQF,OAAO,iBAAiBV,EAAIa,WAAWD,a,MCtB5C,SAASE,IACpB,OACI,yBAAK1B,UAAU,UACX,yBAAKA,UAAU,UACX,mDAEJ,yBAAKA,UAAU,QACX,6E,qBCRD,EAEH,WACR,OAAO2B,IAAMC,IAAI,kDCsGNC,G,kNAnGbC,MAAQ,CACNC,cAAc,EACd3B,OAAQ,GACRM,QAAS,GACTsB,YAAa,GACbC,WAAY,I,EAIdC,kBAAoB,WAClB,EAAKC,gB,EAGPA,aAAe,WACbC,IACGC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZ7B,QAAS4B,EAAIE,KAAK9B,UAEpB+B,QAAQC,IAAI,EAAKZ,MAAMpB,QAAQ,OAEhCiC,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,O,EAGhC1C,kBAAoB,SAAC2C,GACnB,IAAMxC,EAAOwC,EAAMC,OAAOzC,KACpBF,EAAQ0C,EAAMC,OAAO3C,MAC3B,EAAKoC,SAAL,eACGlC,EAAOF,K,EAIZ4C,iBAAmB,SAACF,GAClBA,EAAMG,iBACN,EAAKC,gBAAgB,EAAKnB,MAAM1B,S,EAGlC8C,WAAa,WACX,IAAIC,EAAS,GAEXA,EADE,EAAKrB,MAAMC,aACJ,EAAKD,MAAMpB,QAAQ0C,MAAK,SAACC,EAAGC,GACnC,IAAIC,EAAQF,EAAEhD,KAAKY,KAAKuC,cACpBC,EAAQH,EAAEjD,KAAKY,KAAKuC,cACxB,OAAID,EAAQE,GAAe,EACvBF,EAAQE,EAAc,EACnB,KAGA,EAAK3B,MAAMpB,QAAQ0C,MAAK,SAACC,EAAGC,GACnC,IAAIC,EAAQF,EAAEhD,KAAKY,KAAKuC,cACpBC,EAAQH,EAAEjD,KAAKY,KAAKuC,cACxB,OAAID,EAAQE,GAAe,EACvBF,EAAQE,EAAc,EACnB,KAGX,EAAKlB,SAAS,CACZR,cAAe,EAAKD,MAAMC,aAC1BC,YAAamB,K,uDAIP,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE/C,OAAQsD,KAAK5B,MAAM1B,OACnB2C,iBAAkBW,KAAKX,iBACvB7C,kBAAmBwD,KAAKxD,oBAE1B,2BAAOM,GAAI,OAAOR,UAAU,8CAC1B,+BACE,4BACE,wBAAI2D,MAAM,OAAV,SACA,wBAAIA,MAAM,OACR,0BAAMnD,GAAG,OAAOoD,QAASF,KAAKR,YAA9B,QAAgDQ,KAAK5B,MAAMG,aAE7D,wBAAI0B,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,OACA,wBAAIA,MAAM,OAAV,gBAGJ,kBAAC,EAAD,CACEjD,QAASgD,KAAK5B,MAAMpB,QAAQmD,QAC1B,SAACjD,GAAD,OACEA,EAAIQ,KAAK0C,SAAS,EAAKhC,MAAM1B,SAC7BQ,EAAIS,MAAMyC,SAAS,EAAKhC,MAAM1B,SAC9BQ,EAAIP,KAAKa,MAAM4C,SAAS,EAAKhC,MAAM1B,SACnCQ,EAAIP,KAAKY,KAAK6C,SAAS,EAAKhC,MAAM1B,SAClCQ,EAAIO,MAAM2C,SAAS,EAAKhC,MAAM1B,mB,GA3FtB2D,cCATC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.605bb099.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SearchBar.css\"\n\nfunction SearchBar(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <input\n          onChange={props.handleInputChange}\n          value={props.search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Name, Phone, Email\"\n          id=\"search\"\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default SearchBar;","import React from \"react\";\nimport Moment from \"react-moment\";\nimport \"./EmployeeTable.css\";\n\nfunction EmployeeTable(props) {\n\n  return (\n    <tbody>\n      {props.results.map((emp) => (\n        <tr>\n          <td>\n            <img src={emp.picture.medium} id=\"empImg\" alt=\"empImg\"/>\n          </td>\n          <td>\n          {emp.name.last}, {emp.name.first} \n          </td>\n          <td>\n            <b>Home:</b> {emp.phone} <br />\n            <b>Cell:</b> {emp.cell} <br />\n            <b>Email:</b> {emp.email} <br />\n          </td>\n          <td>\n            <Moment format=\"MMMM DD, YYYY\">{emp.dob.date}</Moment>\n          </td>\n          <td>\n            <Moment format=\"MMMM DD, YYYY\">{emp.registered.date}</Moment>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nexport default EmployeeTable;","import React from 'react';\nimport \"./Header.css\";\n\nexport default function Header() {\n    return (\n        <div className=\"banner\">\n            <div className=\"header\">\n                <h1>Employee Directory</h1>\n            </div>\n            <div className=\"info\">\n                <h5>Type to search, or click 'name' to sort A-Z</h5>\n            </div>\n        </div>\n    )\n}","import axios from \"axios\";\n\nexport default {\n\n  getUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n}","import React, { Component } from \"react\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport EmployeeTable from \"../EmployeeTable/EmployeeTable\";\nimport Header from \"../Header/Header\";\nimport API from \"../../utils/API\";\nimport \"./Container.css\";\n\nclass Container extends Component {\n  state = {\n    alphabetical: true,\n    search: \"\",\n    results: [],\n    alphResults: [],\n    sortedIcon: \"\"\n  };\n\n  // Pulls entries from random employee API on load\n  componentDidMount = () => {\n    this.getEmployees();\n  };\n\n  getEmployees = () => {\n    API.getUsers()\n      .then((res) => {\n        this.setState({\n          results: res.data.results,\n        });\n        console.log(this.state.results[0]);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  handleInputChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    this.searchEmployees(this.state.search);\n  };\n\n  sortByName = () => {\n    let sorted = [];\n    if (this.state.alphabetical) {\n      sorted = this.state.results.sort((a, b) => {\n        let nameA = a.name.last.toLowerCase();\n        let nameB = b.name.last.toLowerCase();\n        if (nameA < nameB) return -1;\n        if (nameA > nameB) return 1;\n        return 0;\n      });\n    } else {\n      sorted = this.state.results.sort((a, b) => {\n        let nameA = a.name.last.toLowerCase();\n        let nameB = b.name.last.toLowerCase();\n        if (nameA > nameB) return -1;\n        if (nameA < nameB) return 1;\n        return 0;\n      });\n    }\n    this.setState({\n      alphabetical: !this.state.alphabetical,\n      alphResults: sorted,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <SearchBar\n          search={this.state.search}\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}\n        />\n        <table id =\"main\" className=\"table table-striped table-dark text-center\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Image</th>\n              <th scope=\"col\">\n                <span id=\"name\" onClick={this.sortByName}>Name {this.state.sortedIcon}</span>\n              </th>\n              <th scope=\"col\">Contact</th>\n              <th scope=\"col\">DOB</th>\n              <th scope=\"col\">Start Date</th>\n            </tr>\n          </thead>\n          <EmployeeTable\n            results={this.state.results.filter(\n              (emp) =>\n                emp.cell.includes(this.state.search) ||\n                emp.email.includes(this.state.search) ||\n                emp.name.first.includes(this.state.search) ||\n                emp.name.last.includes(this.state.search) ||\n                emp.phone.includes(this.state.search)\n            )}\n          />\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Container;","import React from \"react\";\nimport Container from \"./components/Container/Container\";\n\nfunction App() {\n  return <Container />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}